/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package swagger.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.swagger.Implicits._
case class ConnectionMessage(id: Option[Int] = None, connectionId: Option[String] = None) extends ResponseMessage
object ConnectionMessage {
  implicit val encodeConnectionMessage: _root_.io.circe.Encoder.AsObject[ConnectionMessage] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[ConnectionMessage](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("id", a.id.asJson), ("connectionId", a.connectionId.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeConnectionMessage: _root_.io.circe.Decoder[ConnectionMessage] = new _root_.io.circe.Decoder[ConnectionMessage] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[ConnectionMessage] = for (v0 <- c.downField("id").as[Option[Int]]; v1 <- c.downField("connectionId").as[Option[String]]) yield ConnectionMessage(v0, v1) }
}