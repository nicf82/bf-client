/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package swagger.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.swagger.Implicits._
case class AllRequestTypesExample(opTypes: Option[AllRequestTypesExample.OpTypes] = None, heartbeat: Option[HeartbeatMessage] = None, orderSubscriptionMessage: Option[OrderSubscriptionMessage] = None, marketSubscription: Option[MarketSubscriptionMessage] = None, authentication: Option[AuthenticationMessage] = None)
object AllRequestTypesExample {
  implicit val encodeAllRequestTypesExample: _root_.io.circe.Encoder.AsObject[AllRequestTypesExample] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[AllRequestTypesExample](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("opTypes", a.opTypes.asJson), ("heartbeat", a.heartbeat.asJson), ("orderSubscriptionMessage", a.orderSubscriptionMessage.asJson), ("marketSubscription", a.marketSubscription.asJson), ("authentication", a.authentication.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeAllRequestTypesExample: _root_.io.circe.Decoder[AllRequestTypesExample] = new _root_.io.circe.Decoder[AllRequestTypesExample] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[AllRequestTypesExample] = for (v0 <- c.downField("opTypes").as[Option[AllRequestTypesExample.OpTypes]]; v1 <- c.downField("heartbeat").as[Option[HeartbeatMessage]]; v2 <- c.downField("orderSubscriptionMessage").as[Option[OrderSubscriptionMessage]]; v3 <- c.downField("marketSubscription").as[Option[MarketSubscriptionMessage]]; v4 <- c.downField("authentication").as[Option[AuthenticationMessage]]) yield AllRequestTypesExample(v0, v1, v2, v3, v4) }
  sealed abstract class OpTypes(val value: String) extends _root_.scala.Product with _root_.scala.Serializable { override def toString: String = value.toString }
  object OpTypes {
    object members {
      case object Heartbeat extends OpTypes("heartbeat")
      case object Authentication extends OpTypes("authentication")
      case object MarketSubscription extends OpTypes("marketSubscription")
      case object OrderSubscription extends OpTypes("orderSubscription")
    }
    val Heartbeat: OpTypes = members.Heartbeat
    val Authentication: OpTypes = members.Authentication
    val MarketSubscription: OpTypes = members.MarketSubscription
    val OrderSubscription: OpTypes = members.OrderSubscription
    val values = _root_.scala.Vector(Heartbeat, Authentication, MarketSubscription, OrderSubscription)
    implicit val encodeOpTypes: _root_.io.circe.Encoder[OpTypes] = _root_.io.circe.Encoder[String].contramap(_.value)
    implicit val decodeOpTypes: _root_.io.circe.Decoder[OpTypes] = _root_.io.circe.Decoder[String].emap(value => from(value).toRight(s"$value not a member of OpTypes"))
    implicit val showOpTypes: Show[OpTypes] = Show[String].contramap[OpTypes](_.value)
    def from(value: String): _root_.scala.Option[OpTypes] = values.find(_.value == value)
    implicit val order: cats.Order[OpTypes] = cats.Order.by[OpTypes, Int](values.indexOf)
  }
}