/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package swagger.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.swagger.Implicits._
case class StrategyMatchChange(mb: Option[Vector[Vector[Double]]] = None, ml: Option[Vector[Vector[Double]]] = None)
object StrategyMatchChange {
  implicit val encodeStrategyMatchChange: _root_.io.circe.Encoder.AsObject[StrategyMatchChange] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[StrategyMatchChange](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("mb", a.mb.asJson), ("ml", a.ml.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeStrategyMatchChange: _root_.io.circe.Decoder[StrategyMatchChange] = new _root_.io.circe.Decoder[StrategyMatchChange] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[StrategyMatchChange] = for (v0 <- c.downField("mb").as[Option[Vector[Vector[Double]]]]; v1 <- c.downField("ml").as[Option[Vector[Vector[Double]]]]) yield StrategyMatchChange(v0, v1) }
}