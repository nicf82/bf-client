/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package swagger.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.swagger.Implicits._
import cats.syntax.either._
trait RequestMessage { def id: Option[Int] }
object RequestMessage {
  val discriminator: String = "op"
  implicit val encoder: _root_.io.circe.Encoder[RequestMessage] = _root_.io.circe.Encoder.instance({
    case e: AuthenticationMessage =>
      e.asJsonObject.add(discriminator, "authentication".asJson).asJson
    case e: MarketSubscriptionMessage =>
      e.asJsonObject.add(discriminator, "marketSubscription".asJson).asJson
    case e: OrderSubscriptionMessage =>
      e.asJsonObject.add(discriminator, "orderSubscription".asJson).asJson
    case e: HeartbeatMessage =>
      e.asJsonObject.add(discriminator, "heartbeat".asJson).asJson
  })
  implicit val decoder: _root_.io.circe.Decoder[RequestMessage] = _root_.io.circe.Decoder.instance { c => 
    val discriminatorCursor = c.downField(discriminator)
    discriminatorCursor.as[String].flatMap({
      case "authentication" =>
        c.as[AuthenticationMessage]
      case "marketSubscription" =>
        c.as[MarketSubscriptionMessage]
      case "orderSubscription" =>
        c.as[OrderSubscriptionMessage]
      case "heartbeat" =>
        c.as[HeartbeatMessage]
      case tpe =>
        _root_.scala.Left(DecodingFailure("Unknown value " ++ tpe ++ " (valid: authentication, marketSubscription, orderSubscription, heartbeat)", discriminatorCursor.history))
    })
  }
}