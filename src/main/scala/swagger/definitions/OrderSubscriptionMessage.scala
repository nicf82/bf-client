/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package swagger.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.swagger.Implicits._
case class OrderSubscriptionMessage(id: Option[Int] = None, segmentationEnabled: Option[Boolean] = None, orderFilter: Option[OrderFilter] = None, clk: Option[String] = None, heartbeatMs: Option[Long] = None, initialClk: Option[String] = None, conflateMs: Option[Long] = None) extends RequestMessage
object OrderSubscriptionMessage {
  implicit val encodeOrderSubscriptionMessage: _root_.io.circe.Encoder.AsObject[OrderSubscriptionMessage] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[OrderSubscriptionMessage](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("id", a.id.asJson), ("segmentationEnabled", a.segmentationEnabled.asJson), ("orderFilter", a.orderFilter.asJson), ("clk", a.clk.asJson), ("heartbeatMs", a.heartbeatMs.asJson), ("initialClk", a.initialClk.asJson), ("conflateMs", a.conflateMs.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeOrderSubscriptionMessage: _root_.io.circe.Decoder[OrderSubscriptionMessage] = new _root_.io.circe.Decoder[OrderSubscriptionMessage] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[OrderSubscriptionMessage] = for (v0 <- c.downField("id").as[Option[Int]]; v1 <- c.downField("segmentationEnabled").as[Option[Boolean]]; v2 <- c.downField("orderFilter").as[Option[OrderFilter]]; v3 <- c.downField("clk").as[Option[String]]; v4 <- c.downField("heartbeatMs").as[Option[Long]]; v5 <- c.downField("initialClk").as[Option[String]]; v6 <- c.downField("conflateMs").as[Option[Long]]) yield OrderSubscriptionMessage(v0, v1, v2, v3, v4, v5, v6) }
}