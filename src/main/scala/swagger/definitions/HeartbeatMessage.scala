/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package swagger.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.swagger.Implicits._
case class HeartbeatMessage(id: Option[Int] = None) extends RequestMessage
object HeartbeatMessage {
  implicit val encodeHeartbeatMessage: _root_.io.circe.Encoder.AsObject[HeartbeatMessage] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[HeartbeatMessage](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("id", a.id.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeHeartbeatMessage: _root_.io.circe.Decoder[HeartbeatMessage] = new _root_.io.circe.Decoder[HeartbeatMessage] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[HeartbeatMessage] = for (v0 <- c.downField("id").as[Option[Int]]) yield HeartbeatMessage(v0) }
}