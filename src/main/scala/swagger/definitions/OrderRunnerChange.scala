/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package swagger.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.swagger.Implicits._
case class OrderRunnerChange(mb: Option[Vector[Vector[Double]]] = None, smc: Option[_root_.scala.Predef.Map[_root_.scala.Predef.String, StrategyMatchChange]] = None, uo: Option[_root_.scala.Vector[Order]] = None, id: Option[Long] = None, hc: Option[Double] = None, fullImage: Option[Boolean] = None, ml: Option[Vector[Vector[Double]]] = None)
object OrderRunnerChange {
  implicit val encodeOrderRunnerChange: _root_.io.circe.Encoder.AsObject[OrderRunnerChange] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[OrderRunnerChange](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("mb", a.mb.asJson), ("smc", a.smc.asJson), ("uo", a.uo.asJson), ("id", a.id.asJson), ("hc", a.hc.asJson), ("fullImage", a.fullImage.asJson), ("ml", a.ml.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeOrderRunnerChange: _root_.io.circe.Decoder[OrderRunnerChange] = new _root_.io.circe.Decoder[OrderRunnerChange] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[OrderRunnerChange] = for (v0 <- c.downField("mb").as[Option[Vector[Vector[Double]]]]; v1 <- c.downField("smc").as[Option[_root_.scala.Predef.Map[_root_.scala.Predef.String, StrategyMatchChange]]]; v2 <- c.downField("uo").as[Option[_root_.scala.Vector[Order]]]; v3 <- c.downField("id").as[Option[Long]]; v4 <- c.downField("hc").as[Option[Double]]; v5 <- c.downField("fullImage").as[Option[Boolean]]; v6 <- c.downField("ml").as[Option[Vector[Vector[Double]]]]) yield OrderRunnerChange(v0, v1, v2, v3, v4, v5, v6) }
}