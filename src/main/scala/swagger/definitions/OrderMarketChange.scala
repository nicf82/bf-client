/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package swagger.definitions

import cats.syntax.either._
import io.circe._
import io.circe.syntax._
import cats.implicits._
import _root_.swagger.Implicits._
case class OrderMarketChange(accountId: Option[Long] = None, orc: Option[_root_.scala.Vector[OrderRunnerChange]] = None, closed: Option[Boolean] = None, id: Option[String] = None, fullImage: Option[Boolean] = None)
object OrderMarketChange {
  implicit val encodeOrderMarketChange: _root_.io.circe.Encoder.AsObject[OrderMarketChange] = {
    val readOnlyKeys = _root_.scala.Predef.Set[_root_.scala.Predef.String]()
    _root_.io.circe.Encoder.AsObject.instance[OrderMarketChange](a => _root_.io.circe.JsonObject.fromIterable(_root_.scala.Vector(("accountId", a.accountId.asJson), ("orc", a.orc.asJson), ("closed", a.closed.asJson), ("id", a.id.asJson), ("fullImage", a.fullImage.asJson)))).mapJsonObject(_.filterKeys(key => !(readOnlyKeys contains key)))
  }
  implicit val decodeOrderMarketChange: _root_.io.circe.Decoder[OrderMarketChange] = new _root_.io.circe.Decoder[OrderMarketChange] { final def apply(c: _root_.io.circe.HCursor): _root_.io.circe.Decoder.Result[OrderMarketChange] = for (v0 <- c.downField("accountId").as[Option[Long]]; v1 <- c.downField("orc").as[Option[_root_.scala.Vector[OrderRunnerChange]]]; v2 <- c.downField("closed").as[Option[Boolean]]; v3 <- c.downField("id").as[Option[String]]; v4 <- c.downField("fullImage").as[Option[Boolean]]) yield OrderMarketChange(v0, v1, v2, v3, v4) }
}